{% doc %}
  @prompt
    create a before and after image slider

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-before-after-slider-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .ai-before-after-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: {{ block.settings.aspect_ratio }}%;
  }

  .ai-before-after-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;}

  .ai-before-after-after-{{ ai_gen_id }} {
    clip-path: inset(0 0 0 50%);
    transition: clip-path 0.3s ease;
  }

  .ai-before-after-slider-handle-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 50%;
    width: {{ block.settings.handle_size }}px;
    height: 100%;
    background-color: {{ block.settings.handle_color }};
    cursor: col-resize;
    transform: translateX(-50%);
    z-index: 10;
    transition: left 0.3s ease;
  }

  .ai-before-after-slider-handle-{{ ai_gen_id }}::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: {{ block.settings.handle_circle_size }}px;
    height: {{ block.settings.handle_circle_size }}px;
    background-color: {{ block.settings.handle_color }};
    border: 3px solid {{ block.settings.handle_border_color }};
    border-radius: 50%;
    transform: translate(-50%, -50%);
  }

  .ai-before-after-slider-handle-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='{{ block.settings.handle_border_color | url_encode }}' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='15,18 9,12 15,6'%3E%3C/polyline%3E%3Cpolyline points='9,18 15,12 9,6'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    transform: translate(-50%, -50%);
  }

  .ai-before-after-label-{{ ai_gen_id }} {
    position: absolute;
    top: 20px;
    padding: 8px 16px;
    background-color: {{ block.settings.label_background_color }};
    color: {{ block.settings.label_text_color }};
    font-size: {{ block.settings.label_font_size }}px;
    font-weight: 600;
    border-radius: 20px;
    z-index: 5;
  }

  .ai-before-after-label-before-{{ ai_gen_id }} {
    left: 20px;
  }

  .ai-before-after-label-after-{{ ai_gen_id }} {
    right: 20px;
  }

  .ai-before-after-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-before-after-placeholder-{{ ai_gen_id }} svg {
    width: 100px;
    height: 100px;
    opacity: 0.3;
  }

  @media screen and (max-width: 749px) {
    .ai-before-after-slider-{{ ai_gen_id }} {
      max-width: 100%;
    }

    .ai-before-after-label-{{ ai_gen_id }} {
      font-size: {{ block.settings.label_font_size | times: 0.9 }}px;
      padding: 6px 12px;
    }

    .ai-before-after-label-before-{{ ai_gen_id }} {
      left: 10px;
    }

    .ai-before-after-label-after-{{ ai_gen_id }} {
      right: 10px;
    }
  }
{% endstyle %}

<before-after-slider-{{ ai_gen_id }}
  class="ai-before-after-slider-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-before-after-container-{{ ai_gen_id }}">
    {% if block.settings.before_image %}
      <img
        src="{{ block.settings.before_image | image_url: width: 1200 }}"
        alt="{{ block.settings.before_image.alt | escape }}"
        class="ai-before-after-image-{{ ai_gen_id }} ai-before-after-before-{{ ai_gen_id }}"
        loading="lazy"
        width="{{ block.settings.before_image.width }}"
        height="{{ block.settings.before_image.height }}"
      >
    {% else %}
      <div class="ai-before-after-image-{{ ai_gen_id }} ai-before-after-before-{{ ai_gen_id }}">
        <div class="ai-before-after-placeholder-{{ ai_gen_id }}">
          {{ 'image' | placeholder_svg_tag }}
        </div>
      </div>
    {% endif %}

    {% if block.settings.after_image %}
      <img
        src="{{ block.settings.after_image | image_url: width: 1200 }}"
        alt="{{ block.settings.after_image.alt | escape }}"
        class="ai-before-after-image-{{ ai_gen_id }} ai-before-after-after-{{ ai_gen_id }}"
        loading="lazy"
        width="{{ block.settings.after_image.width }}"
        height="{{ block.settings.after_image.height }}"
      >
    {% else %}
      <div class="ai-before-after-image-{{ ai_gen_id }} ai-before-after-after-{{ ai_gen_id }}">
        <div class="ai-before-after-placeholder-{{ ai_gen_id }}">
          {{ 'image' | placeholder_svg_tag }}
        </div>
      </div>
    {% endif %}

    <div class="ai-before-after-slider-handle-{{ ai_gen_id }}"></div>

    {% if block.settings.show_labels %}
      <div class="ai-before-after-label-{{ ai_gen_id }} ai-before-after-label-before-{{ ai_gen_id }}">
        {{ block.settings.before_label }}
      </div>
      <div class="ai-before-after-label-{{ ai_gen_id }} ai-before-after-label-after-{{ ai_gen_id }}">
        {{ block.settings.after_label }}
      </div>
    {% endif %}
  </div>
</before-after-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class BeforeAfterSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.isDragging = false;
        this.startX = 0;
        this.currentPosition = 50;
      }

      connectedCallback() {
        this.container = this.querySelector('.ai-before-after-container-{{ ai_gen_id }}');
        this.handle = this.querySelector('.ai-before-after-slider-handle-{{ ai_gen_id }}');
        this.afterImage = this.querySelector('.ai-before-after-after-{{ ai_gen_id }}');
        
        this.setupEventListeners();
        this.updateSlider(this.currentPosition);
      }

      setupEventListeners() {
        this.handle.addEventListener('mousedown', this.startDrag.bind(this));
        this.handle.addEventListener('touchstart', this.startDrag.bind(this), { passive: false });
        document.addEventListener('mousemove', this.drag.bind(this));
        document.addEventListener('touchmove', this.drag.bind(this), { passive: false });
        
        document.addEventListener('mouseup', this.stopDrag.bind(this));
        document.addEventListener('touchend', this.stopDrag.bind(this));
        
        this.container.addEventListener('click', this.handleClick.bind(this));
      }

      startDrag(e) {
        this.isDragging = true;
        this.startX = this.getEventX(e);
        e.preventDefault();
      }

      drag(e) {
        if (!this.isDragging) return;
        
        e.preventDefault();
        const rect = this.container.getBoundingClientRect();
        const x = this.getEventX(e) - rect.left;
        const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));
        
        this.updateSlider(percentage);
      }

      stopDrag() {
        this.isDragging = false;
      }

      handleClick(e) {
        if (this.isDragging) return;
        
        const rect = this.container.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));
        
        this.updateSlider(percentage);
      }

      getEventX(e) {
        return e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
      }

      updateSlider(percentage) {
        this.currentPosition = percentage;
        this.handle.style.left = percentage + '%';
        this.afterImage.style.clipPath = `inset(0 0 0 ${percentage}%)`;
      }
    }

    customElements.define('before-after-slider-{{ ai_gen_id }}', BeforeAfterSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Before and after slider",
  "settings": [
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After image"
    },
    {
      "type": "header",
      "content": "Labels"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show labels",
      "default": true
    },
    {
      "type": "text",
      "id": "before_label",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "text",
      "id": "after_label",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "range",
      "id": "label_font_size",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Label font size",
      "default": 14
    },
    {
      "type": "color",
      "id": "label_background_color",
      "label": "Label background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "label_text_color",
      "label": "Label text",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Slider handle"
    },
    {
      "type": "range",
      "id": "handle_size",
      "min": 2,
      "max": 8,
      "step": 1,
      "unit": "px",
      "label": "Handle width",
      "default": 4
    },
    {
      "type": "range",
      "id": "handle_circle_size",
      "min": 30,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Handle circle size",
      "default": 40
    },
    {
      "type": "color",
      "id": "handle_color",
      "label": "Handle color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "handle_border_color",
      "label": "Handle border color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 300,
      "max": 1200,
      "step": 50,
      "unit": "px",
      "label": "Maximum width",
      "default": 800
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Aspect ratio",
      "options": [
        {
          "value": "56.25",
          "label": "16:9"
        },
        {
          "value": "66.67",
          "label": "3:2"
        },
        {
          "value": "75",
          "label": "4:3"
        },
        {
          "value": "100",
          "label": "1:1"
        }
      ],
      "default": "66.67"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Before and after slider"
    }
  ],
  "tag": null
}
{% endschema %}