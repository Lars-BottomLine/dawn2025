{% doc %}
  @prompt
    create a small before and after picture slider, the images have to have the same ratio and zoom, it needs a toggle.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-before-after-slider-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .ai-before-after-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.height }}px;
    cursor: col-resize;
    user-select: none;
  }

  .ai-before-after-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  .ai-before-after-overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 50%;
    height: 100%;
    overflow: hidden;
    transition: width 0.3s ease;
  }

  .ai-before-after-overlay-{{ ai_gen_id }} .ai-before-after-image-{{ ai_gen_id }} {
    width: {{ block.settings.max_width }}px;
    max-width: none;
    left: 0;
  }

  .ai-before-after-divider-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 50%;
    width: {{ block.settings.divider_width }}px;
    height: 100%;
    background-color: {{ block.settings.divider_color }};
    transform: translateX(-50%);
    z-index: 3;
    transition: left 0.3s ease;
  }

  .ai-before-after-handle-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    width: {{ block.settings.handle_size }}px;
    height: {{ block.settings.handle_size }}px;
    background-color: {{ block.settings.handle_color }};
    border: 3px solid {{ block.settings.handle_border_color }};
    border-radius: 50%;
    transform: translate(-50%, -50%);
    cursor: col-resize;
    z-index: 4;
    transition: left 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-before-after-handle-{{ ai_gen_id }}::before,
  .ai-before-after-handle-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    border-style: solid;
  }

  .ai-before-after-handle-{{ ai_gen_id }}::before {
    border-width: 6px 8px 6px 0;
    border-color: transparent {{ block.settings.handle_border_color }} transparent transparent;
    left: 8px;
  }

  .ai-before-after-handle-{{ ai_gen_id }}::after {
    border-width: 6px 0 6px 8px;
    border-color: transparent transparent transparent {{ block.settings.handle_border_color }};
    right: 8px;
  }

  .ai-before-after-label-{{ ai_gen_id }} {
    position: absolute;
    top: {{ block.settings.label_position }}px;
    padding: 8px 16px;
    background-color: {{ block.settings.label_bg_color }};
    color: {{ block.settings.label_text_color }};
    font-size: {{ block.settings.label_font_size }}px;
    font-weight: 600;
    border-radius: 20px;
    z-index: 2;
    pointer-events: none;
  }

  .ai-before-after-label-before-{{ ai_gen_id }} {
    left: {{ block.settings.label_position }}px;
  }

  .ai-before-after-label-after-{{ ai_gen_id }} {
    right: {{ block.settings.label_position }}px;
  }

  .ai-before-after-toggle-{{ ai_gen_id }} {
    position: absolute;
    bottom: {{ block.settings.label_position }}px;
    left: 50%;
    transform: translateX(-50%);
    background-color: {{ block.settings.toggle_bg_color }};
    color: {{ block.settings.toggle_text_color }};
    border: none;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: {{ block.settings.label_font_size }}px;
    font-weight: 600;
    cursor: pointer;
    z-index: 5;
    transition: background-color 0.3s ease;
  }

  .ai-before-after-toggle-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.toggle_hover_color }};
  }

  .ai-before-after-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: {{ block.settings.height }}px;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-before-after-placeholder-{{ ai_gen_id }} svg {
    width: 100px;
    height: 100px;
    opacity: 0.5;
  }

  @media screen and (max-width: 749px) {
    .ai-before-after-container-{{ ai_gen_id }} {
      height: {{ block.settings.height | times: 0.7 }}px;
    }

    .ai-before-after-placeholder-{{ ai_gen_id }} {
      height: {{ block.settings.height | times: 0.7 }}px;
    }

    .ai-before-after-handle-{{ ai_gen_id }} {
      width: {{ block.settings.handle_size | times: 0.8 }}px;
      height: {{ block.settings.handle_size | times: 0.8 }}px;
    }

    .ai-before-after-label-{{ ai_gen_id }},
    .ai-before-after-toggle-{{ ai_gen_id }} {
      font-size: {{ block.settings.label_font_size | times: 0.9 }}px;
      padding: 6px 12px;
    }
  }
{% endstyle %}

<before-after-slider-{{ ai_gen_id }}
  class="ai-before-after-slider-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.before_image and block.settings.after_image %}
    <div class="ai-before-after-container-{{ ai_gen_id }}">
      <img
        src="{{ block.settings.after_image | image_url: width: block.settings.max_width }}"
        alt="{{ block.settings.after_image.alt | escape }}"
        class="ai-before-after-image-{{ ai_gen_id }} ai-before-after-after-img-{{ ai_gen_id }}"
        loading="lazy"
        width="{{ block.settings.after_image.width }}"
        height="{{ block.settings.after_image.height }}"
      >

      <div class="ai-before-after-overlay-{{ ai_gen_id }}">
        <img
          src="{{ block.settings.before_image | image_url: width: block.settings.max_width }}"
          alt="{{ block.settings.before_image.alt | escape }}"
          class="ai-before-after-image-{{ ai_gen_id }} ai-before-after-before-img-{{ ai_gen_id }}"
          loading="lazy"
          width="{{ block.settings.before_image.width }}"
          height="{{ block.settings.before_image.height }}"
        >
      </div>

      <div class="ai-before-after-divider-{{ ai_gen_id }}"></div>
      <div class="ai-before-after-handle-{{ ai_gen_id }}"></div>

      {% if block.settings.show_labels %}
        <div class="ai-before-after-label-{{ ai_gen_id }} ai-before-after-label-before-{{ ai_gen_id }}">
          {{ block.settings.before_label }}
        </div>
        <div class="ai-before-after-label-{{ ai_gen_id }} ai-before-after-label-after-{{ ai_gen_id }}">
          {{ block.settings.after_label }}
        </div>
      {% endif %}

      {% if block.settings.show_toggle %}
        <button class="ai-before-after-toggle-{{ ai_gen_id }}" aria-label="Toggle between before and after">
          <span class="ai-before-after-toggle-text-{{ ai_gen_id }}">{{ block.settings.toggle_text }}</span>
        </button>
      {% endif %}
    </div>
  {% else %}
    <div class="ai-before-after-placeholder-{{ ai_gen_id }}">
      {{ 'image' | placeholder_svg_tag }}
    </div>
  {% endif %}
</before-after-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class BeforeAfterSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.isDragging = false;
        this.startX = 0;
        this.currentPosition = 50;
        this.isToggled = false;
      }

      connectedCallback() {
        this.container = this.querySelector('.ai-before-after-container-{{ ai_gen_id }}');
        this.overlay = this.querySelector('.ai-before-after-overlay-{{ ai_gen_id }}');
        this.divider = this.querySelector('.ai-before-after-divider-{{ ai_gen_id }}');
        this.handle = this.querySelector('.ai-before-after-handle-{{ ai_gen_id }}');
        this.toggle = this.querySelector('.ai-before-after-toggle-{{ ai_gen_id }}');
        this.toggleText = this.querySelector('.ai-before-after-toggle-text-{{ ai_gen_id }}');
        this.beforeImg = this.querySelector('.ai-before-after-before-img-{{ ai_gen_id }}');
        this.afterImg = this.querySelector('.ai-before-after-after-img-{{ ai_gen_id }}');

        if (!this.container) return;

        this.setupEventListeners();
        this.ensureImageAlignment();
      }

      setupEventListeners() {
        this.container.addEventListener('mousedown', this.handleStart.bind(this));
        this.container.addEventListener('touchstart', this.handleStart.bind(this), { passive: false });
        document.addEventListener('mousemove', this.handleMove.bind(this));
        document.addEventListener('touchmove', this.handleMove.bind(this), { passive: false });document.addEventListener('mouseup', this.handleEnd.bind(this));
        document.addEventListener('touchend', this.handleEnd.bind(this));

        this.container.addEventListener('click', this.handleClick.bind(this));

        if (this.toggle) {
          this.toggle.addEventListener('click', this.handleToggle.bind(this));
        }

        window.addEventListener('resize', this.ensureImageAlignment.bind(this));
      }

      ensureImageAlignment() {
        if (!this.beforeImg || !this.afterImg) return;

        const containerRect = this.container.getBoundingClientRect();
        const containerWidth = containerRect.width;
        
        this.beforeImg.style.width = containerWidth + 'px';
        this.afterImg.style.width = containerWidth + 'px';
      }

      handleStart(e) {
        if (e.target === this.toggle) return;
        
        e.preventDefault();
        this.isDragging = true;
        this.container.style.cursor = 'col-resize';
        
        const clientX = e.type === 'touchstart' ? e.touches[0].clientX : e.clientX;
        this.startX = clientX;
      }

      handleMove(e) {
        if (!this.isDragging) return;
        
        e.preventDefault();
        const clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;
        this.updatePosition(clientX);
      }

      handleEnd() {
        this.isDragging = false;
        this.container.style.cursor = 'col-resize';
      }

      handleClick(e) {
        if (this.isDragging || e.target === this.toggle) return;
        
        const clientX = e.type === 'touchstart' ? e.touches[0].clientX : e.clientX;
        this.updatePosition(clientX);
      }

      handleToggle(e) {
        e.stopPropagation();
        this.isToggled = !this.isToggled;
        if (this.isToggled) {
          this.updateSliderPosition(100);
          this.toggleText.textContent = '{{ block.settings.toggle_text_alt }}';
        } else {
          this.updateSliderPosition(0);
          this.toggleText.textContent = '{{ block.settings.toggle_text }}';
        }
      }

      updatePosition(clientX) {
        const rect = this.container.getBoundingClientRect();
        const x = clientX - rect.left;
        const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));
        
        this.updateSliderPosition(percentage);
      }

      updateSliderPosition(percentage) {
        this.currentPosition = percentage;
        this.overlay.style.width = percentage + '%';
        this.divider.style.left = percentage + '%';
        this.handle.style.left = percentage + '%';
      }
    }

    customElements.define('before-after-slider-{{ ai_gen_id }}', BeforeAfterSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Before and after slider",
  "settings": [
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After image"
    },
    {
      "type": "header",
      "content": "Labels"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show labels",
      "default": true
    },
    {
      "type": "text",
      "id": "before_label",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "text",
      "id": "after_label",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "color",
      "id": "label_bg_color",
      "label": "Label background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "label_text_color",
      "label": "Label text",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "label_font_size",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Label font size",
      "default": 14
    },
    {
      "type": "range",
      "id": "label_position",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Label position",
      "default": 20
    },
    {
      "type": "header",
      "content": "Toggle button"
    },
    {
      "type": "checkbox",
      "id": "show_toggle",
      "label": "Show toggle button",
      "default": true
    },
    {
      "type": "text",
      "id": "toggle_text",
      "label": "Toggle text",
      "default": "Show After"
    },
    {
      "type": "text",
      "id": "toggle_text_alt",
      "label": "Toggle text alternate",
      "default": "Show Before"
    },
    {
      "type": "color",
      "id": "toggle_bg_color",
      "label": "Toggle background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "toggle_text_color",
      "label": "Toggle text",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "toggle_hover_color",
      "label": "Toggle hover background",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Slider handle"
    },
    {
      "type": "color",
      "id": "handle_color",
      "label": "Handle background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "handle_border_color",
      "label": "Handle border",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "handle_size",
      "min": 30,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Handle size",
      "default": 40
    },
    {
      "type": "color",
      "id": "divider_color",
      "label": "Divider color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "divider_width",
      "min": 1,
      "max": 5,
      "step": 1,
      "unit": "px",
      "label": "Divider width",
      "default": 2
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 300,
      "max": 800,
      "step": 50,
      "unit": "px",
      "label": "Maximum width",
      "default": 600
    },
    {
      "type": "range",
      "id": "height",
      "min": 200,
      "max": 600,
      "step": 50,
      "unit": "px",
      "label": "Height",
      "default": 400
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Before and after slider"
    }
  ],
  "tag": null
}
{% endschema %}